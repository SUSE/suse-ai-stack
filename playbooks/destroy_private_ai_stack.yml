---
- hosts: localhost
  connection: local
  tasks:

    - name: Fetch tofu output
      shell: |
        tofu output --json
      args:
        chdir: "{{ (current_project_dir, 'roles/vm/terraform') | path_join }}"
      register: tfstate
      when: cloud_provider | default('local') != "local"

    - name: Set tofu output
      set_fact:
        tofuoutput: "{{ tfstate.stdout | from_json }}"
      when: cloud_provider | default('local') != "local"

    - name: Display tofu output
      debug:
        msg: "{{ tofuoutput }}"
      when: cloud_provider | default('local') != "local"

    - name: set python_interpreter sle-micro
      set_fact:
        python_interpreter: "{{ vm_python_interpreter | default('/usr/bin/python3') }}"
      when: (cluster is defined and cluster.image_distro == "sle-micro") or cluster is not defined

    - name: set python_interpreter sles
      set_fact:
        python_interpreter: "{{ vm_python_interpreter | default('/usr/bin/python3.11') }}"
      when: (cluster is defined and cluster.image_distro == "sles")   

    - name: Define private-ai node (master node) local
      ansible.builtin.add_host:
        ansible_python_interpreter: "{{ python_interpreter }}"
        name: private-ai
        hostname: private-ai
        ansible_user: "{{ vm_ansible_user | default('ai') }}"
        ansible_host: "{{ private_ai_vm_ip | default('192.168.122.100') }}"
        groups:
          - cp_master
      when: cloud_provider | default('local') == "local"

    - name: Define private-ai node (master node) non-local
      ansible.builtin.add_host:
        ansible_python_interpreter: "{{ python_interpreter }}"
        name: private-ai
        hostname: private-ai
        ansible_user: "{{ vm_ansible_user | default('ai') }}"
        ansible_host: "{{ tofuoutput.instance_public_ip.value }}"
        groups:
          - cp_master
      when: cloud_provider | default('local') != "local" and tofuoutput.instance_public_ip is defined

- hosts: cp_master
  gather_facts: false
  tasks:
    # We want to cleanup the DNS records before deleting the stack.
    # Just Uninstalling the external-dns does not cleanup the records.
    # Deleting ingress resources first ensures that ExternalDNS has a chance to
    # remove the associated DNS records before it's removed from the cluster.
    - name: Remove Ingress
      shell: |
        #!/bin/bash
        ingresses_json=$(kubectl get ingresses --all-namespaces -o json)
        ingresses_array=$(echo "$ingresses_json" | jq -c '.items[]')
        for ingress in $ingresses_array; do
          name=$(echo "$ingress" | jq -r '.metadata.name')
          namespace=$(echo "$ingress" | jq -r '.metadata.namespace')
          kubectl delete ingress $name -n $namespace
        done
        sleep 60
      when: enable_external_dns | default(false)

    - name: Uninstall external-dns
      import_role:
        name: external-dns
      vars:
        uninstall: true
      when: enable_external_dns | default(false)
      ignore_errors: true

- hosts: localhost
  connection: local
  tasks:
    - name: Destroy Private AI Stack
      include_role:
        name: vm
      vars:
        vm_action: destroy
        vm_instance_name: private-ai
