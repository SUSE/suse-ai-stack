- name: Copy selinux policy for pulsar
  template:
    src: pulsar.pp
    dest: ~/pulsar.pp

- name: Check SELinux status
  become: true
  command: getenforce
  register: selinux_status
  ignore_errors: true

- name: Run semodule command if SELinux is enabled
  become: true
  shell: |
    semodule -X 300 -i /home/{{ vm_ansible_user | default('ai') }}/pulsar.pp
    sleep 20 # need to let things settle after semodule
  when: selinux_status.stdout in ['Enforcing', 'Permissive']

- name: Install Ollama CLI
  shell: >
    export PATH=/usr/local/bin:$PATH
    curl -fsSL https://ollama.com/install.sh | sh
  when: not (deploy_rancher_only | default(false))

- name: Add OLLAMA_HOST to .bashrc
  lineinfile:
    path: "~/.bashrc"
    regexp: "^export OLLAMA_HOST="
    line: "export OLLAMA_HOST={{ ollama_hostname }}:80"

- name: Copy ollama-values.yaml
  template:
    src: ollama-values.yaml.j2
    dest: ~/ollama-values.yaml
  when: ollama_deploy_separately

- name: Copy milvus-values.yaml
  template:
    src: milvus-values.yaml.j2
    dest: ~/milvus-values.yaml

- name: Copy open-webui-values.yaml
  template:
    src: open-webui-values.yaml.j2
    dest: ~/open-webui-values.yaml

- name: Wait for port 9345
  wait_for:
    port: 9345
    delay: 10
    timeout: 180

# sometimes an error like this is seen: "failed calling webhook \"rancher.cattle.io.namespaces.create-non-kubesystem\": failed to call webhook: Post \"https://rancher-webhook.cattle-system.svc:443/v1/webhook/validation/namespaces?timeout=10s\"
# workaround is to retry
- name: Create suse-private-ai namespace
  shell: |
    max_retries=10
    delay=30
    for retry in $(seq 1 $max_retries); do
      if ! kubectl get namespaces -o json | jq -r ".items[].metadata.name" | grep {{ suse_private_ai_namespace }};then
        status=$(kubectl create namespace {{ suse_private_ai_namespace }})
        if [[ "$status" == *"created"* ]]; then
          exit 0
        else
          sleep $delay
        fi
      fi
    done

- name: Create secret for application collection
  shell: |
    max_retries=10
    delay=30
    SECRET_NAME={{ appco_secret }}
    for retry in $(seq 1 $max_retries); do
      if ! kubectl get secrets -n {{ suse_private_ai_namespace }} -o json | jq -r ".items[].metadata.name" | grep $SECRET_NAME;then
        status=$(kubectl create secret docker-registry {{ appco_secret }} --docker-server=dp.apps.rancher.io --docker-username={{ application_collection_user_email }} --docker-password={{ application_collection_user_token }} -n {{ suse_private_ai_namespace }})
        if [[ "$status" == *"created"* ]]; then
          exit 0
        else
          sleep $delay
        fi
      fi
    done

- name: Deploy milvus helm chart
  shell: |
    if [[ {{ milvus_helm_repo }} == *"dp.apps.rancher.io"* ]]; then
        helm registry login dp.apps.rancher.io/charts -u {{ application_collection_user_email }} -p {{ application_collection_user_token }}
        helm upgrade --install {{ milvus_release_name }} {{ milvus_helm_repo }} -n {{ suse_private_ai_namespace }} --create-namespace  --version {{ milvus_helm_version }} -f milvus-values.yaml
    else
        helm upgrade --install {{ milvus_release_name }} milvus --repo {{ milvus_helm_repo }} -n {{ suse_private_ai_namespace }} --create-namespace --version {{ milvus_helm_version }} -f milvus-values.yaml
    fi
  register: milvus_deploy_result
  until: milvus_deploy_result.rc == 0
  retries: 5
  delay: 20
  when: enable_milvus and (not deploy_rancher_only | default(False) | bool)

- name: Wait for SUSE Private AI (Minio Standalone) to be successfully rolled out
  shell: >
    kubectl -n {{ suse_private_ai_namespace }} rollout status deploy/{{ item }}
  register: rollout_result
  retries: 6
  delay: 30
  until: "'successfully rolled out' in rollout_result.stdout"
  with_items:
  - "{{ milvus_release_name }}-minio"
  when: enable_milvus and enable_minio_standalone_deployment and (not deploy_rancher_only | default(False) | bool)

- name: Wait for SUSE Private AI (Minio distributed) to be successfully rolled out
  shell: >
    kubectl -n {{ suse_private_ai_namespace }} rollout status statefulset {{ item }}
  register: rollout_result
  retries: 8
  delay: 30
  until: "'statefulset rolling update complete' in rollout_result.stdout"
  with_items:
  - "{{ milvus_release_name }}-minio"
  when: enable_milvus and (not enable_minio_standalone_deployment) and  (not deploy_rancher_only | default(False) | bool)

- name: Wait for SUSE Private AI (Milvus Standalone) to be successfully rolled out
  shell: >
    kubectl -n {{ suse_private_ai_namespace }} rollout status deploy/{{ item }}
  register: rollout_result
  retries: 6
  delay: 30
  until: "'successfully rolled out' in rollout_result.stdout"
  with_items:
  - "milvus-standalone"
  when: enable_milvus and (not enable_milvus_cluster_deployment) and  (not deploy_rancher_only | default(False) | bool)

- name: Wait for SUSE Private AI (Milvus cluster) to be successfully rolled out
  shell: >
    kubectl -n {{ suse_private_ai_namespace }} rollout status deploy/{{ item }}
  register: rollout_result
  retries: 8
  delay: 30
  until: "'successfully rolled out' in rollout_result.stdout"
  with_items:
  - "milvus-datanode"
  - "milvus-indexnode"
  - "milvus-proxy"
  - "milvus-querynode"
  when: enable_milvus and enable_milvus_cluster_deployment and (not deploy_rancher_only | default(False) | bool)

- name: Deploy ollama separately
  shell: |
    if [[ {{ ollama_helm_repo }} == *"dp.apps.rancher.io"* ]]; then
        helm registry login dp.apps.rancher.io/charts -u {{ application_collection_user_email }} -p {{ application_collection_user_token }}
        helm upgrade --install {{ ollama_release_name }} {{ ollama_helm_repo }} -n {{ suse_private_ai_namespace }} --create-namespace --version {{ ollama_helm_version }} -f ollama-values.yaml
    else
        helm upgrade --install {{ ollama_release_name }} ollama --repo {{ ollama_helm_repo }} -n {{ suse_private_ai_namespace }} --create-namespace --version {{ ollama_helm_version }}  -f ollama-values.yaml
    fi
  register: ollama_deploy_result
  until: ollama_deploy_result.rc == 0
  retries: 3
  delay: 20
  when: ollama_deploy_separately and (not deploy_rancher_only | default(False) | bool)

- name: Wait for SUSE Private AI ollama to be successfully rolled out
  shell: >
    kubectl -n {{ suse_private_ai_namespace }} rollout status deploy/{{ item }}
  register: rollout_result
  retries: 6
  delay: 30
  until: "'successfully rolled out' in rollout_result.stdout"
  with_items:
  - "ollama"
  when: ollama_deploy_separately and (not deploy_rancher_only | default(False) | bool)

- name: Deploy open-webui
  shell: |
    if [[ {{ openwebui_helm_repo }} == *"dp.apps.rancher.io"* ]]; then
        helm registry login dp.apps.rancher.io/charts -u {{ application_collection_user_email }} -p {{ application_collection_user_token }}
        helm upgrade --install {{ openwebui_release_name }} {{ openwebui_helm_repo }} -n {{ suse_private_ai_namespace }} --create-namespace  --version {{ openwebui_helm_version }} -f open-webui-values.yaml
    else
        helm upgrade --install {{ openwebui_release_name }} open-webui --repo {{ openwebui_helm_repo }} -n {{ suse_private_ai_namespace }} --create-namespace --version {{ openwebui_helm_version }} -f open-webui-values.yaml
    fi
  register: open_webui_deploy_result
  until: open_webui_deploy_result.rc == 0
  retries: 3
  delay: 20
  when: not deploy_rancher_only | default(False) | bool

- name: Wait for SUSE Private AI (embedded ollama) to be successfully rolled out
  shell: >
    kubectl -n {{ suse_private_ai_namespace }} rollout status deploy/{{ item }}
  register: rollout_result
  retries: 6
  delay: 30
  until: "'successfully rolled out' in rollout_result.stdout"
  with_items:
  - "{{ openwebui_release_name }}-ollama"
  when: not ollama_deploy_separately and (not deploy_rancher_only | default(False) | bool)


- name: Wait for SUSE Private AI (openwebui) to be successfully rolled out
  shell: >
    kubectl -n {{ suse_private_ai_namespace }} rollout status statefulset/{{ item }}
  register: rollout_result
  retries: 6
  delay: 30
  until: "'roll out complete' in rollout_result.stdout"
  with_items:
  - "{{ openwebui_release_name }}"
  when: not ollama_deploy_separately and (not deploy_rancher_only | default(False) | bool)

- name: Copy patch-open-webui-ingress.yaml
  template:
    src: patch-open-webui-ingress.yaml.j2
    dest: ~/patch-open-webui-ingress.yaml
  when: false

- name: Patch open-webui ingress
  shell: >
    kubectl patch ingress open-webui -n {{ suse_private_ai_namespace }} --patch-file patch-open-webui-ingress.yaml
  when: false

- name: Copy patch-open-webui-deployment.yaml
  template:
    src: patch-open-webui-deployment.yaml.j2
    dest: ~/patch-open-webui-deployment.yaml
  when: false

- name: Patch open-webui deployment with the private DNS entry
  shell: >
    kubectl patch statefulset open-webui -n {{ suse_private_ai_namespace }} --patch-file patch-open-webui-deployment.yaml
  when: false

- name: Copy open_webui_user_create.json.j2
  template:
    src: open_webui_user_create.json.j2
    dest: ~/open_webui_user_create.json

- name: Create Open WebUI admin user
  uri:
    url: https://{{ open_webui_host }}/api/v1/auths/signup
    method: POST
    validate_certs: "{{ validate_certs }}"
    follow_redirects: urllib2
    src: ~/open_webui_user_create.json
    body_format: json
    remote_src: true
  retries: 10
  delay: 120
  when: not deploy_rancher_only | default(False) | bool
