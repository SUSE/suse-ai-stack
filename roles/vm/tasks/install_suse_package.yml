---
- name: Install SUSE packages "{{ suse_packages }}"
  become: true
  community.general.zypper:
    name: "{{ suse_packages }}"
    state: latest
    update_cache: true
  register: install_suse_packages_result
  until: "'rc' not in install_suse_packages_result or install_suse_packages_result.rc == 0"
  retries: 10
  delay: 60
  when: false

- name: Install SUSE packages "{{ suse_packages }}" sle-micro
  become: true
  shell: |
    transactional-update --continue -n pkg install --auto-agree-with-licenses {{ suse_packages | join(' ') }}
  when:
    - suse_packages | length > 0
    - ansible_distribution == 'SL-Micro'

# Since unzip is not available in sle-micro, this is a workaround.
- name: Install unzip package required to install opentofu on sle-micro
  become: true
  shell: |
    transactional-update --continue -n pkg install --auto-agree-with-licenses https://download.opensuse.org/distribution/leap/15.6/repo/oss/{{ ansible_facts.architecture }}/unzip-6.00-150000.4.11.1.{{ ansible_facts.architecture }}.rpm
  when: ansible_distribution == 'SL-Micro'

- name: Install SUSE packages "{{ suse_packages }}" sles
  become: true
  shell: |
    zypper --non-interactive install {{ suse_packages | join(' ') }}
  when:
    - suse_packages | length > 0
    - ansible_distribution == 'SLES'

- name: Install Longhorn dependency packages
  become: true
  community.general.zypper:
    name: ["open-iscsi", "nfs-client", "nfs-utils", "cryptsetup", "device-mapper"]
    state: latest
    update_cache: true
  register: install_suse_packages_result
  until: "'rc' not in install_suse_packages_result or install_suse_packages_result.rc == 0"
  retries: 10
  delay: 60
  when: cloud_provider == "aws" and enable_longhorn

# https://documentation.suse.com/suse-ai/1.0/html/NVIDIA-GPU-driver-on-SL-Micro/index.html
# Install the nvidia driver packages on the servers that has GPU.
- name: Add a package repository from NVIDIA
  become: true
  community.general.zypper_repository:
    name: cuda-sle15
    repo: 'https://developer.download.nvidia.com/compute/cuda/repos/sles15/{{ ansible_architecture }}/'
    #name: nvidia-sle15sp6-main
    #repo: 'https://download.nvidia.com/suse/sle15sp6/'
    state: present
    auto_import_keys: true
    runrefresh: true
  when: (enable_gpu_operator | default(false)) and not (use_nvidia_driver_installer | default(false))

- name: Copy install-nvidia-packages.sh script
  become: true
  copy:
    src: files/install-nvidia-packages.sh
    dest: ~/install-nvidia-packages.sh
    mode: "0755"

- name: Set nvidia_pkg_install command - sles
  set_fact:
    nvidia_pkg_install_cmd: >-
      bash -c "FALLBACK_DRIVER_VERSION_SLES={{ nvidia_driver_sles_version | default('575.57.08') }} ~/install-nvidia-packages.sh"
  when: ansible_distribution == 'SLES'

- name: Set nvidia_pkg_install command - sl-micro
  set_fact:
    nvidia_pkg_install_cmd: >-
      transactional-update --continue run bash -c "FALLBACK_DRIVER_VERSION_SLE_MICRO={{ nvidia_driver_sle_micro_version | default('570.133.20') }} ~/install-nvidia-packages.sh"
  when: ansible_distribution == 'SL-Micro'

- name: Check for GPU using lspci
  become: true
  command: lspci
  register: lspci_out
  when: (enable_gpu_operator | default(false)) and not (use_nvidia_driver_installer | default(false))

- name: Determine if GPU is present
  set_fact:
    has_gpu: "{{ lspci_out.stdout is search('VGA compatible controller.*NVIDIA|3D controller.*NVIDIA', ignorecase=True) }}"
  when: (enable_gpu_operator | default(false)) and not (use_nvidia_driver_installer | default(false))

- name: Install NVIDIA graphic drivers packages
  become: true
  command: "{{ nvidia_pkg_install_cmd }}"
  register: version_result
  when: (enable_gpu_operator | default(false)) and not (use_nvidia_driver_installer | default(false)) and has_gpu

# NOTE: for SL Micro, package installation requires transactional update.
# Therefore, we need to do reboot for the changes to take effect.
- name: Reboot after transactional update
  become: true
  reboot:
    msg: "Rebooting after transactional update for the changes take effect."

- name: Wait for port 22
  wait_for:
    port: 22
    timeout: "{{ reboot_wait_timeout }}"

- name: Pause
  ansible.builtin.pause:
    seconds: 30

- name: Check that driver packages is installed after the reboot
  become: true
  command: rpm -q {{ item }}
  register: check_installed
  loop:
    - "nvidia-open-driver-G06-signed-cuda-kmp-default"
    - "nvidia-compute-utils-G06"
    - "nvidia-container-toolkit" # validation
  when: (enable_gpu_operator | default(false)) and not (use_nvidia_driver_installer | default(false)) and has_gpu

- name: Validate via nvidia-smi
  become: true
  shell: |
    nvidia-smi --query-gpu=driver_version --format=csv,noheader
  register: nvidia_smi_version_result
  when: (enable_gpu_operator | default(false)) and not (use_nvidia_driver_installer | default(false)) and has_gpu

- name: Assert the driver version
  assert:
    that:
      - nvidia_smi_version_result.stdout in version_result.stdout
    success_msg: "NVIDIA driver version validation passed"
    fail_msg: "NVIDIA driver version validation failed"
  when: (enable_gpu_operator | default(false)) and not (use_nvidia_driver_installer | default(false)) and has_gpu

- name: Validate via nvidia-ctk
  become: true
  shell: |
    nvidia-ctk cdi generate --output=/etc/cdi/nvidia.yaml
  register: nvidia_ctk_result
  ignore_errors: true # validation in next task
  when: (enable_gpu_operator | default(false)) and not (use_nvidia_driver_installer | default(false)) and has_gpu

- name: Assert the nvidia-ctk result
  assert:
    that:
      - nvidia_ctk_result.stdout is defined
      -  "'error' not in nvidia_ctk_result.stdout | lower"
    success_msg: "nvidia-ctk validation passed"
    fail_msg: "nvidia-ctk validation failed"
  when: (enable_gpu_operator | default(false)) and not (use_nvidia_driver_installer | default(false)) and has_gpu

- name: Check that each package is installed after the reboot
  become: true
  command: rpm -q {{ item }}
  loop: "{{ suse_packages }}"
  register: check_installed
  when:
    - suse_packages | length > 0

- name: Print if any package is not installed
  debug:
    msg: "One or more packages were not installed successfully."
  when: check_installed.results | selectattr('rc', 'ne', 0) | list | length > 0
