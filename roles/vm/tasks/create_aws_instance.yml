---
- name: Check AWS configuration
  fail:
    msg: |-
      Did you remember to copy extra_vars.yml.example to extra_vars.yml
          and configure it appropriately?
  when:
    - aws_secret_key is not defined

- name: Write variables to a .tfvars file
  copy:
    dest: "{{ (current_project_dir, 'roles/vm/terraform') | path_join }}/ansible.tfvars"
    content: |
      aws = {
        access_key = "{{ aws_access_key }}"
        secret_key = "{{ aws_secret_key }}"
        region = "{{ aws_region }}"
        az1 = "{{ aws_az1 }}"
        az2 = "{{ aws_az2 }}"
        resource_owner = "{{ aws_resource_owner }}"
        resource_prefix = "{{ aws_resource_prefix }}"
        key_pair_name = "{{ aws_ssh_key_name }}"
        key_pair_public_key = "{{ aws_ssh_public_key }}"
        image_ami_account_number = "{{ aws_image_ami_account_number | default('amazon') }}"
      }
      cluster = {
          user = "{{ cluster.user }}"
          user_home = "{{ cluster.user_home }}"
          root_volume_size = "{{ cluster.root_volume_size }}"
          image_arch = "{{ cluster.image_arch }}"
          image_distro = "{{ cluster.image_distro }}"
          image_distro_version = "{{ cluster.image_distro_version }}"
          instance_type_cp = "{{ cluster.instance_type_cp }}"
          instance_type_gpu = "{{ cluster.instance_type_gpu }}"
          instance_type_nongpu = "{{ cluster.instance_type_nongpu }}"
          num_cp_nodes = "{{ cluster.num_cp_nodes }}"
          num_worker_nodes_gpu = "{{ cluster.num_worker_nodes_gpu }}"
          num_worker_nodes_nongpu = "{{ cluster.num_worker_nodes_nongpu }}"
          token = "{{ cluster.token }}"
          version = "{{ cluster.version }}"
      }
      {% if suse_ai_cluster is defined %}
      suse_ai_cluster = {
          user = "{{ suse_ai_cluster.user }}"
          user_home = "{{ suse_ai_cluster.user_home }}"
          root_volume_size = "{{ suse_ai_cluster.root_volume_size }}"
          image_arch = "{{ suse_ai_cluster.image_arch }}"
          image_distro = "{{ suse_ai_cluster.image_distro }}"
          image_distro_version = "{{ suse_ai_cluster.image_distro_version }}"
          instance_type_cp = "{{ suse_ai_cluster.instance_type_cp }}"
          instance_type_gpu = "{{ suse_ai_cluster.instance_type_gpu }}"
          instance_type_nongpu = "{{ suse_ai_cluster.instance_type_nongpu }}"
          num_cp_nodes = "{{ suse_ai_cluster.num_cp_nodes }}"
          num_worker_nodes_gpu = "{{ suse_ai_cluster.num_worker_nodes_gpu }}"
          num_worker_nodes_nongpu = "{{ suse_ai_cluster.num_worker_nodes_nongpu }}"
          token = "{{ suse_ai_cluster.token }}"
          version = "{{ suse_ai_cluster.version }}"
      }
      {% endif %}
      {% if suse_observability_cluster is defined and enable_suse_observability | default('False') | bool %}
      suse_observability_cluster = {
          user = "{{ suse_observability_cluster.user }}"
          user_home = "{{ suse_observability_cluster.user_home }}"
          root_volume_size = "{{ suse_observability_cluster.root_volume_size }}"
          image_arch = "{{ suse_observability_cluster.image_arch }}"
          image_distro = "{{ suse_observability_cluster.image_distro }}"
          image_distro_version = "{{ suse_observability_cluster.image_distro_version }}"
          instance_type_cp = "{{ suse_observability_cluster.instance_type_cp }}"
          instance_type_worker = "{{ suse_observability_cluster.instance_type_worker }}"
          num_cp_nodes = "{{ suse_observability_cluster.num_cp_nodes }}"
          num_worker_nodes = "{{ suse_observability_cluster.num_worker_nodes }}"
          token = "{{ suse_observability_cluster.token }}"
          version = "{{ suse_observability_cluster.version }}"
      }
      {% endif %}

- name: Initialize OpenTofu
  shell: tofu init
  args:
    chdir: "{{ (current_project_dir, 'roles/vm/terraform') | path_join }}"

- name: Plan OpenTofu deployment
  shell: tofu plan -var-file="ansible.tfvars"
  args:
    chdir: "{{ (current_project_dir, 'roles/vm/terraform') | path_join }}"

- name: Apply OpenTofu configuration and create AWS resources
  shell: tofu apply -auto-approve -var-file="ansible.tfvars"
  args:
    chdir: "{{ (current_project_dir, 'roles/vm/terraform') | path_join }}"
  register: tofu_apply_result

- name: Display resource creation output
  shell: tofu output --json
  args:
    chdir: "{{ (current_project_dir, 'roles/vm/terraform') | path_join }}"
  register: aws_ec2_create_result

- name: Display resource creation output
  debug:
    msg: "{{ aws_ec2_create_result.stdout | from_json }}"

- name: Set parsed tofu output
  set_fact:
    tofu_outputs: "{{ aws_ec2_create_result.stdout | from_json }}"

- name: Parse tofu output for the mgmt cluster
  include_tasks: mgmt_cluster_output.yml

- name: Parse tofu output for the suse-ai cluster
  include_tasks: suse_ai_cluster_output.yml
  when: suse_ai_cluster is defined

- name: Parse tofu output for the suse-observability cluster
  include_tasks: suse_observability_cluster_output.yml
  when: suse_observability_cluster is defined and enable_suse_observability | default('False') | bool

- name: Include ingress_ouput
  include_tasks: ingress_output.yml
